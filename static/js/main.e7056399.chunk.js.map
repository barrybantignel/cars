{"version":3,"sources":["components/Cars.js","components/Mycars.js","App.js","serviceWorker.js","index.js"],"names":["Car","nom","color","year","colorInfo","Mycars","state","voitures","name","titre","addTenYears","updatedState","map","param","setState","Date","getFullYear","this","onClick","voiture","index","key","Component","App","className","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNA2BeA,EAzBH,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAEpBC,EAAYF,EAAS,uCAAaA,GAAc,gDAEtD,OAAID,EAGG,4BACI,4BAAI,qCAAWA,IACf,4BAAI,mCAASE,IACb,4BAAKC,IAOR,MCqDOC,E,4MAhEZC,MAAQ,CACJC,SAAU,CACN,CAACC,KAAM,WAAYN,MAAO,QAASC,KAAM,KACzC,CAACK,KAAM,UAAWN,MAAO,MAAOC,KAAM,MACtC,CAACK,KAAM,SAAUN,MAAO,QAASC,KAAM,OAG3CM,MAAQ,+B,EAGZC,YAAc,WACV,IAAMC,EAAe,EAAKL,MAAMC,SAASK,KAAI,SAACC,GAC1C,OAAOA,EAAMV,MAAQ,MAGzB,EAAKW,SAAS,CACVH,kB,uDAQH,IAAMR,GAAO,IAAIY,MAAOC,cAEpB,OACI,oCAEK,4BAAKC,KAAKX,MAAMG,OAEzB,4BAAQS,QAAWD,KAAKP,aAAxB,aAEA,+BACI,4BAEM,sCACA,mCACA,wCAIV,kBAAC,EAAD,CAAKR,MAAQe,KAAKX,MAAMC,SAAS,GAAGL,MAAOC,KAAOA,EAAOc,KAAKX,MAAMC,SAAS,GAAGJ,KAAO,QAASc,KAAKX,MAAMC,SAAS,GAAGC,MACvH,kBAAC,EAAD,CAAKN,MAAQe,KAAKX,MAAMC,SAAS,GAAGL,MAAOC,KAAOA,EAAOc,KAAKX,MAAMC,SAAS,GAAGJ,KAAO,QAASc,KAAKX,MAAMC,SAAS,GAAGC,MACvH,kBAAC,EAAD,CAAKN,MAAQe,KAAKX,MAAMC,SAAS,GAAGL,MAAOC,KAAOA,EAAOc,KAAKX,MAAMC,SAAS,GAAGJ,KAAO,QAASc,KAAKX,MAAMC,SAAS,GAAGC,MAGnHS,KAAKX,MAAMC,SAASK,KAAI,SAACO,EAASC,GAC9B,OACI,kBAAC,WAAD,CAAUC,IAAKD,GACZ,kBAAC,EAAD,CAAKnB,IAAMkB,EAAQX,KAAMN,MAASiB,EAAQjB,MAAOC,KAAOA,EAAOgB,EAAQhB,KAAO,mB,GArDpFmB,aCqBNC,G,6KAbb,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,W,GAXUC,IAAMH,YCQJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e7056399.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Car = ({nom, color, year}) => {\r\n\r\nconst colorInfo = color ? (<p>Couleur: {color}</p>): (<p>Couleur: Néant</p>);\r\n\r\nif (nom) {\r\n\r\n    return (\r\n       <tr>\r\n           <td><p>Marque:{nom}</p></td>\r\n           <td><p>Age: {year}</p></td>\r\n           <td>{colorInfo}</td>\r\n\r\n          </tr>\r\n\r\n    )\r\n\r\n} else {\r\n return null;\r\n\r\n\r\n\r\n}\r\n\r\n   \r\n}\r\nexport default Car;\r\n\r\n/**\r\n * \r\n * \r\n */\r\n","import React, { Component, Fragment } from 'react';\r\nimport Cars from './Cars'\r\nimport Car from './Cars';\r\n\r\n\r\nclass Mycars extends Component {\r\n\r\n  \r\n   state = {\r\n       voitures: [\r\n           {name: 'Mercedez', color: 'black', year: 2000},\r\n           {name: 'Citroen', color: 'red', year: 2010},\r\n           {name: 'Subaru', color: 'green', year: 2018},\r\n       ],\r\n\r\n       titre : 'Mon catalogue de voitures 2'\r\n   }\r\n\r\n   addTenYears = () => {\r\n       const updatedState = this.state.voitures.map((param) => {\r\n           return param.year -= 10;\r\n       })\r\n\r\n       this.setState({\r\n           updatedState\r\n       })\r\n           \r\n   }\r\n   \r\n    render(){\r\n\r\n        //obtenir la date actuelle\r\n        const year = new Date().getFullYear();\r\n\r\n            return (\r\n                <>\r\n                                \r\n                     <h1>{this.state.titre}</h1>\r\n\r\n            <button onClick = {this.addTenYears}> + 10 ans</button>    \r\n\r\n            <table>\r\n                <tr>\r\n\r\n                      <th>Marque</th>\r\n                      <th>Age</th>\r\n                      <th>Couleur</th>\r\n\r\n                </tr>\r\n                                 \r\n            <Car color= {this.state.voitures[0].color} year ={year - this.state.voitures[0].year + ' ans'}>{this.state.voitures[0].name}</Car>\r\n            <Car color= {this.state.voitures[1].color} year ={year - this.state.voitures[1].year + ' ans'}>{this.state.voitures[1].name}</Car>\r\n            <Car color= {this.state.voitures[2].color} year ={year - this.state.voitures[2].year + ' ans'}>{this.state.voitures[2].name}</Car>\r\n             \r\n            {\r\n                this.state.voitures.map((voiture, index) => {\r\n                    return (\r\n                        <Fragment key={index}>\r\n                           <Car nom= {voiture.name} color = {voiture.color} year= {year - voiture.year + ' ans'}/>\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            } \r\n\r\n            </table>       \r\n                </>\r\n            )\r\n            \r\n           \r\n\r\n    }\r\n}\r\nexport default Mycars;","import React from 'react';\nimport Mycars from './components/Mycars'\nimport './App.css';\n\nclass App extends React.Component {\n\n \n \n\n\n  // insérer méthode render()\nrender() {\n\n  return (\n    <div className=\"App\">\n        <Mycars />\n\n       \n    </div>\n  );\n\n}\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}